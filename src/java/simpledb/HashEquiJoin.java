package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator[] children;
    private ArrayList<Tuple> newTuples;
    private Iterator<Tuple> newTupleIter;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.children = new DbIterator[2];
        children[0] = child1;
        children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(children[0].getTupleDesc(),children[1].getTupleDesc());
    }
    
    public String getJoinField1Name()
    {
        // some code goes here
	return children[0].getTupleDesc().getFieldName(p.getField1());
    }

    public String getJoinField2Name()
    {
        // some code goes here
        return children[1].getTupleDesc().getFieldName(p.getField2());
    }
    
    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        super.open();
        children[0].open();
        children[1].open();
        HashMap<Integer, ArrayList<Tuple>> buckets = new HashMap<>();
        Tuple currentHash;
        int key;
        newTuples = new ArrayList<>();
        while (children[0].hasNext()){
            currentHash = children[0].next();
            key = currentHash.getField(p.getField1()).hashCode();
            if (buckets.containsKey(key)){
                buckets.get(key).add(currentHash);
            }else {
                ArrayList<Tuple> buck = new ArrayList<>();
                buck.add(currentHash);
                buckets.put(key, buck);
            }
        }
        while (children[1].hasNext()){
            currentHash = children[1].next();
            key = currentHash.getField(p.getField2()).hashCode();
            if (buckets.containsKey(key)){
                for(Tuple join2: buckets.get(key)){
                    if (p.filter(currentHash,join2)) {
                        Tuple newTuple = new Tuple(getTupleDesc());
                        Iterator<Field> t2Field = currentHash.fields();
                        Iterator<Field> t1Field = join2.fields();
                        for (int i = 0; i < join2.getTupleDesc().numFields(); i++) {
                            newTuple.setField(i, t1Field.next());
                        }
                        for (int i = join2.getTupleDesc().numFields(); i < newTuple.getTupleDesc().numFields(); i++) {
                            newTuple.setField(i, t2Field.next());
                        }
                        newTuples.add(newTuple);
                    }
                }
            }
        }
        newTupleIter = newTuples.iterator();

    }

    public void close() {
        // some code goes here
        super.close();
        children[0].close();
        children[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    transient Iterator<Tuple> listIt = null;

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if (newTupleIter.hasNext()){
            return newTupleIter.next();
        }else {
            return null;
        }
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.children = children;
    }
    
}
